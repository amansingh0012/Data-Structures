#include <stdio.h>
#include <stdlib.h>

#define MAX 5

struct Queue {
    int arr[MAX];
    int front;
    int rear;
    int size;
};

void initQueue(struct Queue* q) {
    q->front = 0;
    q->rear = -1;
    q->size = 0;
}

int isEmpty(struct Queue* q) {
    return q->size == 0;
}

int isFull(struct Queue* q) {
    return q->size == MAX;
}

void enqueue(struct Queue* q, int value) {
    if (isFull(q)) {
        printf("Queue is full! Cannot enqueue %d\n", value);
    } else {
        q->rear = (q->rear + 1) % MAX;
        q->arr[q->rear] = value;
        q->size++;
        printf("%d enqueued to queue\n", value);
    }
}

int dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! Cannot dequeue\n");
        return -1;
    } else {
        int frontElement = q->arr[q->front];
        q->front = (q->front + 1) % MAX;
        q->size--;
        return frontElement;
    }
}

int frontElement(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty! No front element\n");
        return -1;
    } else {
        return q->arr[q->front];
    }
}

void display(struct Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty!\n");
    } else {
        int i = q->front;
        for (int count = 0; count < q->size; count++) {
            printf("%d ", q->arr[i]);
            i = (i + 1) % MAX;
        }
        printf("\n");
    }
}

int main() {
    struct Queue q;
    initQueue(&q);

    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);

    display(&q);

    printf("Dequeued: %d\n", dequeue(&q));
    display(&q);

    enqueue(&q, 60);
    display(&q);

    printf("Front element: %d\n", frontElement(&q));

    return 0;
}
