#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};


struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// Helper to validate BST using min/max range
int isValidBST(struct Node* root, int min, int max) {
    if (root == NULL) return 1;

    if (root->data <= min || root->data >= max) return 0;

    return isValidBST(root->left, min, root->data) &&
           isValidBST(root->right, root->data, max);
}

// Wrapper function
int checkBST(struct Node* root) {
    return isValidBST(root, INT_MIN, INT_MAX);
}

int main() {
    // Sample BST
    struct Node* root = newNode(10);
    root->left = newNode(5);
    root->right = newNode(15);
    root->left->left = newNode(2);
    root->left->right = newNode(7);
    
    if (checkBST(root))
        printf("The tree is a valid BST.\n");
    else
        printf("The tree is NOT a valid BST.\n");

    return 0;
}
