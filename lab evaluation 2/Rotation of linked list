#include <stdio.h>
#include <stdlib.h>
typedef struct Node
{
    int data;
    struct Node *next;
} Node;

void rotateRight(struct Node **head, int k)
{
    if (*head == NULL || k == 0)
        return;

    struct Node *current = *head, *newHead, *newTail;
    int length = 1;

    while (current->next != NULL)
    {
        current = current->next;
        length++;
    }

    current->next = *head;

    k = k % length;
    int stepsToNewTail = length - k;

    newTail = *head;
    for (int i = 1; i < stepsToNewTail; i++)
        newTail = newTail->next;

    newHead = newTail->next;

    newTail->next = NULL;

    *head = newHead;
}
void insert(Node **head, int data)
{
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;

    if (*head == NULL)
    {
        *head = newNode;
        return;
    }

    Node *temp = *head;
    while (temp->next != NULL)
        temp = temp->next;
    temp->next = newNode;
}
void printList(struct Node *head)
{
    while (head != NULL)
    {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}
int main()
{
    struct Node *head = NULL;

    insert(&head, 10);
    insert(&head, 20);
    insert(&head, 30);
    insert(&head, 40);
    insert(&head, 50);
    insert(&head, 60);

    printf("Original List: \n");
    printList(head);

    rotateRight(&head, 2);

    printf("List after removing duplicates: \n");
    printList(head);

    return 0;
}
